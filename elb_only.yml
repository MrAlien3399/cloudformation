AWSTemplateFormatVersion: 2010-09-09
Description: My First ELB YAML

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH KeyPair
    ConstraintDescription: Existing SSH KeyPair

Resources:
  Web01:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      AvailabilityZone: ap-southeast-1a
      ImageId: ami-00b8d9cb8a7161e41
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Web01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo This is Web01 Website > /var/www/html/index.html
          systemctl restart httpd
  
  Web02:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      AvailabilityZone: ap-southeast-1b
      ImageId: ami-00b8d9cb8a7161e41
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name 
          Value: Web02
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo This is Web02 Website > /var/www/html/index.html
          systemctl restart httpd
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PublicWebDMZ
      GroupDescription: PublicWebDMZ
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ELB
      GroupDescription: ELB
      VpcId: vpc-0a5d655f320ba90a9
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: elb01
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup 
      Subnets:
        - subnet-05c54caeb4144af9e
        - subnet-081878fb64916612b
        - subnet-0f703d2f68cb92755
      Tags:
        - Key: Name
          Value: elb01
      Type: application 
      
  MyELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref MyELBTargetGroup
      LoadBalancerArn: !Ref MyELB
      Port: 80
      Protocol: HTTP

  MyELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref MyELBTargetGroup
      Conditions: 
        - Field: path-pattern
        - PathPatternConfig: /index.html
            
      ListenerArn: !Ref MyELBListener
      Priority: 1

  MyELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: tg01
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name 
          Value: tg01
      Targets:
        - Id: !Ref Web01
        - Id: !Ref Web02
      TargetType: instance
      VpcId: vpc-0a5d655f320ba90a9
  
  
Outputs:
  ELBID:
    Description: ElasticLoadBalancer
    Value: !Ref MyELB 
  
  ELBDNS:
    Description: ELB DNS Name
    Value:  !GetAtt MyELB.DNSName

